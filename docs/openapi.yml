openapi: 3.0.3
info:
  title: Team Dev Server API
  description: |-
  version: '1.0'

servers:
  - url: https://team-dev-backend-api-nameless-cherry-5503.fly.dev/
tags:
  - name: user
  - name: post
  - name: cohort
  - name: log
paths:
  /users:
    post:
      tags:
        - user
      summary: Create user
      description: Create new user
      operationId: createUser
      requestBody:
        description: User registration details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedUser'
        '400':
          description: Invalid email/password supplied
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'     
    get:
      tags:
        - user
      summary: Get all users by first name if provided
      description: ''
      operationId: getAllUsers
      security:
        - bearerAuth: []
      parameters:
        - name: firstName
          in: query
          description: Search all users by first name if provided (case-sensitive and exact string matches only)
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllUsers'
        '400':
          description: Incomplete Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /login:
    post:
      tags:
        - user
      summary: Login
      description: ''
      operationId: loginUser
      requestBody:
        description: User login information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginRes'

        '400':
          description: Incomplete Request
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}:
    get:
      tags:
        - user
      summary: Get user by user id
      description: ''
      operationId: getUserByID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation as a teacher or as a student. If students make the request, only the user is returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '500':
          description: Unable to get user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found by that id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - user
      summary: Update a user
      description: Only users with a TEACHER role can update the cohortId or role. Users with Students role can only update their own details.
      operationId: userUpdate
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: 'The user id that needs to be updated'
          required: true
          schema:
            type: string
      requestBody:
        description: The profile info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedUser'
        '400':
          description: Incomplete Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: A user does not exist with that id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: User is unauthorised to make a change
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /posts:
    post:
      tags:
        - post
      summary: Create post
      description: This can only be done by the logged in user.
      operationId: createPost
      security:
        - bearerAuth: []
      requestBody:
        description: Created post object
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        400:
          description: Incomplete Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - post
      summary: Get all posts
      description: get all posts
      operationId: getPosts
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
        '401':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /posts/{id}:
    get:
      tags:
        - post
      summary: Get post by ID
      description: get post by id
      operationId: getPost
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ' '
          required: true
          schema:
            type: int
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties: 
                  status:
                    type: string
                  data:
                    $ref: '#/components/schemas/Posts'
        '401':
          description: Post not found with that id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /logs:
    post:
      tags:
        - logs
      summary: Create delivery log
      description: This can only be done by an authorised user with role of TEACHER
      operationId: createDeliveryLog
      security:
        - bearerAuth: []
      requestBody:
        description: Create log object
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                cohortId:
                  type: integer
                lines:
                  type: array
                  items:
                    type: object
                    properties:
                      content:
                        type: string
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
        400:
          description: Incomplete Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Cohort not found by that id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An error occured while creating the delivery log
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /cohorts:
    post:
      tags:
        - cohort
      summary: Create a cohort
      description: This can only be done by the logged in user with role TEACHER.
      operationId: createCohort
      security:
        - bearerAuth: []
      requestBody:
        description: success
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCohort'
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      cohort:
                        properties:
                          $ref: '#/components/schemas/Cohort'
        400:
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unable to create cohort
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Post:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            post:
              properties:
                id:
                  type: integer
                content:
                  type: string

    Cohort:
      type: object
      properties:
        id:
          type: integer
        startDate:
          type: string
          format: string
        endDate:
          type: string
          format: string
        createdAt:
          type: string
          format: string
        updatedAt:
          type: string
          format: string
        users:
          type: array
        deliveryLogs:
          type: array

    AllUsers:
      type: object
      properties:
        status:
          type: string
        data:
          type: object
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/User'

    User:
      type: object
      properties:
        id:
          type: integer
        cohortId:
          type: integer
        userId:
          type: integer  
        role:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        userName:
          type: string
        mobile:
          type: integer
        bio:
          type: string
        githubUsername:
          type: string
        notesReceived:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                content:
                  type: string
                teacherId:
                  type: integer
                studentId:
                  type: integer
                  
    CreateUser:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        bio:
          type: string
        githubUsername:
          type: string
        password:
          type: string
        username: 
          type: string
        mobile:
          type: string

    UpdateUser:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        cohortId:
          type: integer
        role:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        bio:
          type: string
        githubUsername:
          type: string
        username: 
          type: string
        mobile:
          type: string

    Posts:
      type: object
      properties:
        status:
          type: string
        data:
          type: object
          properties:
            posts:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                  content:
                    type: string
                  createdAt:
                    type: string
                    format: string
                  updatedAt:
                    type: string
                    format: string
                  author:
                    type: object
                    properties:
                      id:
                        type: integer
                      cohortId:
                        type: integer
                      role:
                        type: string
                      firstName:
                        type: string
                      lastName:
                        type: string
                      bio:
                        type: string
                      githubUsername:
                        type: string
                      profileImageUrl:
                        type: string
                      username: 
                        type: string
                      mobile:
                        type: string
    
    CreatedUser:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          properties:
            user:
              properties:
                id:
                  type: integer
                email:
                  type: string
                cohortId:
                  type: integer
                role:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                bio:
                  type: string
                githubUsername:
                  type: string
                username: 
                  type: string
                mobile:
                  type: string
    login:
      type: object
      properties:
        email:
          type: string
        password:
          type: string

    loginRes:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            token:
              type: string
            user:
              properties:
                id:
                  type: integer
                email:
                  type: string
                cohortId:
                  type: integer
                role:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                bio:
                  type: string
                githubUsername:
                  type: string
                username: 
                  type: string
                mobile:
                  type: string
    Error:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            error:
              type: string

    Log:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            log:
              properties:
                id:
                  type: integer
                cohortId:
                  type: integer
                date:
                  type: string
                author:
                  type: object
                  properties:
                    id:
                      type: integer
                    firstName:
                      type: string
                    lastName:
                      type: string
                lines:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                      content:
                        type: string
    CreateCohort:
      type: object
      properties:
        startDate:
          type: string
        endDate:
          type: string