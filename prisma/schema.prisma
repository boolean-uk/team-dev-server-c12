// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  TEACHER
}

model User {
  id            Int           @id @default(autoincrement())
  email         String        @unique
  password      String
  role          UserRole      @default(STUDENT)
  profile       Profile?
  cohortId      Int?
  cohort        Cohort?       @relation(fields: [cohortId], references: [id], onDelete: Cascade)
  posts         Post[]
  deliveryLogs  DeliveryLog[]
  notesCreated  Note[]        @relation("TeacherNotes")
  notesReceived Note[]        @relation("StudentNotes")
}

model Profile {
  id             Int     @id @default(autoincrement())
  userId         Int     @unique
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName      String?
  lastName       String?
  username       String?
  mobile         String?
  bio            String?
  githubUsername String?
}

model Cohort {
  id           Int           @id @default(autoincrement())
  users        User[]
  deliveryLogs DeliveryLog[]
}

model Post {
  id        Int       @id @default(autoincrement())
  content   String
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model DeliveryLog {
  id       Int               @id @default(autoincrement())
  date     DateTime          @default(now())
  userId   Int
  user     User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  cohortId Int
  cohort   Cohort            @relation(fields: [cohortId], references: [id], onDelete: Cascade)
  lines    DeliveryLogLine[]
}

model DeliveryLogLine {
  id      Int         @id @default(autoincrement())
  content String
  logId   Int
  log     DeliveryLog @relation(fields: [logId], references: [id], onDelete: Cascade)
}

model Note {
  id        Int       @id @default(autoincrement())
  content   String
  teacherId Int
  teacher   User      @relation("TeacherNotes", fields: [teacherId], references: [id], onDelete: Cascade)
  studentId Int
  student   User      @relation("StudentNotes", fields: [studentId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
